generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ORGANIZER
  FIGHTER
  JUDGE
  GUEST
}

enum EventReviewStatus {
  PENDING
  APPROVED
  HIDDEN
}

enum BoutResult {
  RED
  BLUE
  DRAW
  NC
}

enum BoutMethod {
  KO
  SUB
  DEC
  OTH
}

enum ReactionEntityType {
  POST
  MEDIA
  THREAD
}

enum ReactionKind {
  LIKE
}

enum MediaType {
  IMAGE
  VIDEO
}

enum ThreadScope {
  ALL
  FIGHTERS
  JUDGES
  ORGANIZERS
}

enum FighterAttributePrivacy {
  PUBLIC
  PRIVATE
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  image         String?
  role          Role             @default(GUEST)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  sessions      Session[]
  fighter       FighterProfile?
  threads       Thread[]         @relation("ThreadAuthor")
  posts         Post[]
  reactions     Reaction[]
  mediaItems    MediaItem[]      @relation("MediaOwner")
  mediaComments MediaComment[]
  eventReviews  EventReview[]
  ticketSales   TicketSale[]     @relation("TicketBuyer")
  organizedEvents Event[]        @relation("OrganizerEvents")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?     @map("expiresAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken")
  session_state     String?  @map("sessionState")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FighterProfile {
  userId        String  @id
  nickname      String?
  bio           String?
  age           Int?
  weightClass   String?
  region        String?
  gym           String?
  recordW       Int      @default(0)
  recordL       Int      @default(0)
  recordD       Int      @default(0)
  stance        String?
  heightCm      Int?
  reachCm       Int?
  walkoutSong   String?
  socials       Json?
  gymLinks      Json?
  gallery       Json?
  attributes    FighterAttributes?
  attributePrivacy FighterAttributePrivacy @default(PUBLIC)
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  boutsRed      Bout[]  @relation("RedFighter")
  boutsBlue     Bout[]  @relation("BlueFighter")
  reviews       EventReview[]
}

model FighterAttributes {
  id         String  @id @default(cuid())
  fighterId  String  @unique
  power      Int     @default(50)
  cardio     Int     @default(50)
  grappling  Int     @default(50)
  striking   Int     @default(50)
  fighter    FighterProfile @relation(fields: [fighterId], references: [userId], onDelete: Cascade)
}

model Event {
  id              String         @id @default(cuid())
  title           String
  description     String?
  date            DateTime
  venue           String?
  organizerId     String
  visibility      String         @default("PUBLIC")
  ruleset         String         @default("MMA")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  bouts           Bout[]
  reviews         EventReview[]
  expenses        EventExpense[]
  ticketSales     TicketSale[]
  waivers         Waiver[]
  threads         Thread[]       @relation("EventThread")
  messages        EventChatMessage[]
  organizer       User           @relation("OrganizerEvents", fields: [organizerId], references: [id])
}

model Bout {
  id            String   @id @default(cuid())
  eventId       String?
  date          DateTime
  weightClass   String?
  redFighterId  String?
  blueFighterId String?
  rounds        Int      @default(3)
  roundLength   Int?     @default(180)
  result        BoutResult @default(NC)
  method        BoutMethod @default(OTH)
  round         Int?
  time          String?
  event         Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  redFighter    FighterProfile? @relation("RedFighter", fields: [redFighterId], references: [userId])
  blueFighter   FighterProfile? @relation("BlueFighter", fields: [blueFighterId], references: [userId])
}

model EventReview {
  id        String             @id @default(cuid())
  eventId   String
  userId    String
  rating    Int
  comment   String
  status    EventReviewStatus  @default(PENDING)
  createdAt DateTime           @default(now())
  event     Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

model EventExpense {
  id        String   @id @default(cuid())
  eventId   String
  category  String
  amount    Float
  note      String?
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model TicketSale {
  id        String   @id @default(cuid())
  eventId   String
  buyerId   String?
  price     Float
  qty       Int
  channel   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  buyer     User?    @relation("TicketBuyer", fields: [buyerId], references: [id])
}

model Thread {
  id         String      @id @default(cuid())
  title      String
  body       String
  authorId   String
  eventId    String?
  roleScope  ThreadScope @default(ALL)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  author     User        @relation("ThreadAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  posts      Post[]
  reactions  Reaction[]
  event      Event?      @relation("EventThread", fields: [eventId], references: [id])
}

model Post {
  id        String   @id @default(cuid())
  threadId  String
  authorId  String
  body      String
  createdAt DateTime @default(now())
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions Reaction[]
}

model Reaction {
  id         String              @id @default(cuid())
  entityType ReactionEntityType
  entityId   String
  userId     String
  kind       ReactionKind        @default(LIKE)
  createdAt  DateTime            @default(now())
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MediaItem {
  id        String    @id @default(cuid())
  ownerId   String
  url       String
  type      MediaType
  title     String?
  createdAt DateTime  @default(now())
  owner     User      @relation("MediaOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  comments  MediaComment[]
  reactions Reaction[]
}

model MediaComment {
  id        String   @id @default(cuid())
  mediaId   String
  userId    String
  body      String
  createdAt DateTime @default(now())
  media     MediaItem @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Waiver {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  signedAt  DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

model EventChatMessage {
  id        String   @id @default(cuid())
  eventId   String
  senderId  String
  role      Role
  body      String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
